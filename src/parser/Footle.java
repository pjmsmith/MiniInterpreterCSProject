/* Generated By:JavaCC: Do not edit this line. Footle.java */
package parser;

/** Simple brace matcher. */
public class Footle implements FootleConstants {

  /** Main entry point. */
  public static void main(String args[]) throws ParseException {
    Footle parser = new Footle(System.in);
    parser.Input();
  }

/** Root production. */
  static final public void Input() throws ParseException {
    Expression();
    jj_consume_token(0);
  }

/** Base Expression. */
  static final public void Expression() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VAR:
      jj_consume_token(VAR);
      jj_consume_token(ID);
      jj_consume_token(EQ);
      Expression();
      break;
    default:
      jj_la1[11] = jj_gen;
      if (jj_2_1(3)) {
        jj_consume_token(ID);
        jj_consume_token(EQ);
        Expression();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IF:
          jj_consume_token(IF);
          jj_consume_token(LPAREN);
          Expression();
          jj_consume_token(RPAREN);
          jj_consume_token(LBRACE);
          label_1:
          while (true) {
            Expression();
            jj_consume_token(SEMI);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case LBRACE:
            case SEMI:
            case VAR:
            case IF:
            case WHILE:
            case TRUE:
            case FALSE:
            case RETURN:
            case NEW:
            case NOT:
            case STRLEN:
            case SUBSTRING:
            case PRINT:
            case READLINE:
            case STRINGEQUAL:
            case STRINGLESS:
            case ISINT:
            case ISFP:
            case ISVOID:
            case ISSTR:
            case ISCLOSURE:
            case ISPLAIN:
            case FUNC:
            case ID:
            case NUM:
            case FLOAT:
            case STRING:
              ;
              break;
            default:
              jj_la1[0] = jj_gen;
              break label_1;
            }
          }
          jj_consume_token(RBRACE);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case THEN:
            jj_consume_token(THEN);
            jj_consume_token(LBRACE);
            label_2:
            while (true) {
              Expression();
              jj_consume_token(SEMI);
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case LBRACE:
              case SEMI:
              case VAR:
              case IF:
              case WHILE:
              case TRUE:
              case FALSE:
              case RETURN:
              case NEW:
              case NOT:
              case STRLEN:
              case SUBSTRING:
              case PRINT:
              case READLINE:
              case STRINGEQUAL:
              case STRINGLESS:
              case ISINT:
              case ISFP:
              case ISVOID:
              case ISSTR:
              case ISCLOSURE:
              case ISPLAIN:
              case FUNC:
              case ID:
              case NUM:
              case FLOAT:
              case STRING:
                ;
                break;
              default:
                jj_la1[1] = jj_gen;
                break label_2;
              }
            }
            jj_consume_token(RBRACE);
            break;
          default:
            jj_la1[2] = jj_gen;
            ;
          }
          break;
        case WHILE:
          jj_consume_token(WHILE);
          jj_consume_token(LPAREN);
          Expression();
          jj_consume_token(RPAREN);
          jj_consume_token(THEN);
          jj_consume_token(LBRACE);
          label_3:
          while (true) {
            Expression();
            jj_consume_token(SEMI);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case LBRACE:
            case SEMI:
            case VAR:
            case IF:
            case WHILE:
            case TRUE:
            case FALSE:
            case RETURN:
            case NEW:
            case NOT:
            case STRLEN:
            case SUBSTRING:
            case PRINT:
            case READLINE:
            case STRINGEQUAL:
            case STRINGLESS:
            case ISINT:
            case ISFP:
            case ISVOID:
            case ISSTR:
            case ISCLOSURE:
            case ISPLAIN:
            case FUNC:
            case ID:
            case NUM:
            case FLOAT:
            case STRING:
              ;
              break;
            default:
              jj_la1[3] = jj_gen;
              break label_3;
            }
          }
          jj_consume_token(RBRACE);
          break;
        default:
          jj_la1[12] = jj_gen;
          if (jj_2_2(3)) {
            jj_consume_token(ID);
            jj_consume_token(LPAREN);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case LBRACE:
            case SEMI:
            case VAR:
            case IF:
            case WHILE:
            case TRUE:
            case FALSE:
            case RETURN:
            case NEW:
            case NOT:
            case STRLEN:
            case SUBSTRING:
            case PRINT:
            case READLINE:
            case STRINGEQUAL:
            case STRINGLESS:
            case ISINT:
            case ISFP:
            case ISVOID:
            case ISSTR:
            case ISCLOSURE:
            case ISPLAIN:
            case FUNC:
            case ID:
            case NUM:
            case FLOAT:
            case STRING:
              Expression();
              break;
            default:
              jj_la1[4] = jj_gen;
              ;
            }
            label_4:
            while (true) {
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case COMMA:
                ;
                break;
              default:
                jj_la1[5] = jj_gen;
                break label_4;
              }
              jj_consume_token(COMMA);
              Expression();
            }
            jj_consume_token(RPAREN);
            jj_consume_token(SEMI);
          } else {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case LBRACE:
              jj_consume_token(LBRACE);
              label_5:
              while (true) {
                Expression();
                jj_consume_token(SEMI);
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case LBRACE:
                case SEMI:
                case VAR:
                case IF:
                case WHILE:
                case TRUE:
                case FALSE:
                case RETURN:
                case NEW:
                case NOT:
                case STRLEN:
                case SUBSTRING:
                case PRINT:
                case READLINE:
                case STRINGEQUAL:
                case STRINGLESS:
                case ISINT:
                case ISFP:
                case ISVOID:
                case ISSTR:
                case ISCLOSURE:
                case ISPLAIN:
                case FUNC:
                case ID:
                case NUM:
                case FLOAT:
                case STRING:
                  ;
                  break;
                default:
                  jj_la1[6] = jj_gen;
                  break label_5;
                }
              }
              jj_consume_token(RBRACE);
              break;
            case FUNC:
              jj_consume_token(FUNC);
              jj_consume_token(ID);
              jj_consume_token(LPAREN);
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case ID:
                jj_consume_token(ID);
                break;
              default:
                jj_la1[7] = jj_gen;
                ;
              }
              label_6:
              while (true) {
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case COMMA:
                  ;
                  break;
                default:
                  jj_la1[8] = jj_gen;
                  break label_6;
                }
                jj_consume_token(COMMA);
                jj_consume_token(ID);
              }
              jj_consume_token(RPAREN);
              jj_consume_token(LBRACE);
              label_7:
              while (true) {
                Expression();
                jj_consume_token(SEMI);
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case LBRACE:
                case SEMI:
                case VAR:
                case IF:
                case WHILE:
                case TRUE:
                case FALSE:
                case RETURN:
                case NEW:
                case NOT:
                case STRLEN:
                case SUBSTRING:
                case PRINT:
                case READLINE:
                case STRINGEQUAL:
                case STRINGLESS:
                case ISINT:
                case ISFP:
                case ISVOID:
                case ISSTR:
                case ISCLOSURE:
                case ISPLAIN:
                case FUNC:
                case ID:
                case NUM:
                case FLOAT:
                case STRING:
                  ;
                  break;
                default:
                  jj_la1[9] = jj_gen;
                  break label_7;
                }
              }
              jj_consume_token(RBRACE);
              break;
            case RETURN:
              jj_consume_token(RETURN);
              Expression();
              jj_consume_token(SEMI);
              break;
            case ISINT:
            case ISFP:
            case ISVOID:
            case ISSTR:
            case ISCLOSURE:
            case ISPLAIN:
              IsType();
              jj_consume_token(LPAREN);
              Expression();
              jj_consume_token(RPAREN);
              break;
            case NEW:
              jj_consume_token(NEW);
              Expression();
              break;
            default:
              jj_la1[13] = jj_gen;
              if (jj_2_3(3)) {
                jj_consume_token(ID);
                label_8:
                while (true) {
                  switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                  case DOT:
                    ;
                    break;
                  default:
                    jj_la1[10] = jj_gen;
                    break label_8;
                  }
                  jj_consume_token(DOT);
                  jj_consume_token(ID);
                }
              } else {
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case PRINT:
                  jj_consume_token(PRINT);
                  jj_consume_token(LPAREN);
                  Expression();
                  jj_consume_token(RPAREN);
                  break;
                case READLINE:
                  jj_consume_token(READLINE);
                  jj_consume_token(LPAREN);
                  jj_consume_token(RPAREN);
                  break;
                default:
                  jj_la1[14] = jj_gen;
                  if (jj_2_4(3)) {
                    jj_consume_token(ID);
                    jj_consume_token(INSTANCEOF);
                    Expression();
                  } else {
                    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                    case STRLEN:
                      jj_consume_token(STRLEN);
                      jj_consume_token(LPAREN);
                      Expression();
                      jj_consume_token(RPAREN);
                      break;
                    case SUBSTRING:
                      jj_consume_token(SUBSTRING);
                      jj_consume_token(LPAREN);
                      Expression();
                      jj_consume_token(RPAREN);
                      break;
                    case STRINGEQUAL:
                      jj_consume_token(STRINGEQUAL);
                      jj_consume_token(LPAREN);
                      Expression();
                      jj_consume_token(COMMA);
                      Expression();
                      jj_consume_token(RPAREN);
                      break;
                    case STRINGLESS:
                      jj_consume_token(STRINGLESS);
                      jj_consume_token(LPAREN);
                      Expression();
                      jj_consume_token(COMMA);
                      Expression();
                      jj_consume_token(RPAREN);
                      break;
                    default:
                      jj_la1[15] = jj_gen;
                      if (jj_2_5(3)) {
                        NumExpression();
                        jj_consume_token(PLUS);
                        Expression();
                      } else if (jj_2_6(3)) {
                        NumExpression();
                        jj_consume_token(MINUS);
                        Expression();
                      } else if (jj_2_7(3)) {
                        NumExpression();
                        jj_consume_token(DIVIDE);
                        Expression();
                      } else if (jj_2_8(3)) {
                        NumExpression();
                        jj_consume_token(MULT);
                        Expression();
                      } else {
                        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                        case NUM:
                        case FLOAT:
                          NumExpression();
                          break;
                        default:
                          jj_la1[16] = jj_gen;
                          if (jj_2_9(3)) {
                            BoolExpression();
                            jj_consume_token(LTHEN);
                            Expression();
                          } else if (jj_2_10(3)) {
                            BoolExpression();
                            jj_consume_token(GTHEN);
                            Expression();
                          } else if (jj_2_11(3)) {
                            BoolExpression();
                            jj_consume_token(LTE);
                            Expression();
                          } else if (jj_2_12(3)) {
                            BoolExpression();
                            jj_consume_token(GTE);
                            Expression();
                          } else if (jj_2_13(3)) {
                            BoolExpression();
                            jj_consume_token(EQUAL);
                            Expression();
                          } else if (jj_2_14(3)) {
                            BoolExpression();
                            jj_consume_token(AND);
                            Expression();
                          } else if (jj_2_15(3)) {
                            BoolExpression();
                            jj_consume_token(OR);
                            Expression();
                          } else {
                            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                            case TRUE:
                            case FALSE:
                              BoolExpression();
                              break;
                            case NOT:
                              jj_consume_token(NOT);
                              BoolExpression();
                              break;
                            case SEMI:
                              jj_consume_token(SEMI);
                              break;
                            case STRING:
                              jj_consume_token(STRING);
                              break;
                            default:
                              jj_la1[17] = jj_gen;
                              jj_consume_token(-1);
                              throw new ParseException();
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }

  static final public void NumExpression() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUM:
      jj_consume_token(NUM);
      break;
    case FLOAT:
      jj_consume_token(FLOAT);
      break;
    default:
      jj_la1[18] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void BoolExpression() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRUE:
      jj_consume_token(TRUE);
      break;
    case FALSE:
      jj_consume_token(FALSE);
      break;
    default:
      jj_la1[19] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void IsType() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ISINT:
      jj_consume_token(ISINT);
      break;
    case ISFP:
      jj_consume_token(ISFP);
      break;
    case ISVOID:
      jj_consume_token(ISVOID);
      break;
    case ISSTR:
      jj_consume_token(ISSTR);
      break;
    case ISCLOSURE:
      jj_consume_token(ISCLOSURE);
      break;
    case ISPLAIN:
      jj_consume_token(ISPLAIN);
      break;
    default:
      jj_la1[20] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

/** Brace counting production. */
  static final public int MatchedBraces() throws ParseException {
  int nested_count=0;
    jj_consume_token(LBRACE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACE:
      nested_count = MatchedBraces();
      break;
    default:
      jj_la1[21] = jj_gen;
      ;
    }
    jj_consume_token(RBRACE);
    {if (true) return ++nested_count;}
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  static private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  static private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  static private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  static private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  static private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  static private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  static private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  static private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  static private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  static private boolean jj_3R_9() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_15()) {
    jj_scanpos = xsp;
    if (jj_3_1()) {
    jj_scanpos = xsp;
    if (jj_3R_16()) {
    jj_scanpos = xsp;
    if (jj_3R_17()) {
    jj_scanpos = xsp;
    if (jj_3_2()) {
    jj_scanpos = xsp;
    if (jj_3R_18()) {
    jj_scanpos = xsp;
    if (jj_3R_19()) {
    jj_scanpos = xsp;
    if (jj_3R_20()) {
    jj_scanpos = xsp;
    if (jj_3R_21()) {
    jj_scanpos = xsp;
    if (jj_3R_22()) {
    jj_scanpos = xsp;
    if (jj_3_3()) {
    jj_scanpos = xsp;
    if (jj_3R_23()) {
    jj_scanpos = xsp;
    if (jj_3R_24()) {
    jj_scanpos = xsp;
    if (jj_3_4()) {
    jj_scanpos = xsp;
    if (jj_3R_25()) {
    jj_scanpos = xsp;
    if (jj_3R_26()) {
    jj_scanpos = xsp;
    if (jj_3R_27()) {
    jj_scanpos = xsp;
    if (jj_3R_28()) {
    jj_scanpos = xsp;
    if (jj_3_5()) {
    jj_scanpos = xsp;
    if (jj_3_6()) {
    jj_scanpos = xsp;
    if (jj_3_7()) {
    jj_scanpos = xsp;
    if (jj_3_8()) {
    jj_scanpos = xsp;
    if (jj_3R_29()) {
    jj_scanpos = xsp;
    if (jj_3_9()) {
    jj_scanpos = xsp;
    if (jj_3_10()) {
    jj_scanpos = xsp;
    if (jj_3_11()) {
    jj_scanpos = xsp;
    if (jj_3_12()) {
    jj_scanpos = xsp;
    if (jj_3_13()) {
    jj_scanpos = xsp;
    if (jj_3_14()) {
    jj_scanpos = xsp;
    if (jj_3_15()) {
    jj_scanpos = xsp;
    if (jj_3R_30()) {
    jj_scanpos = xsp;
    if (jj_3R_31()) {
    jj_scanpos = xsp;
    if (jj_scan_token(9)) {
    jj_scanpos = xsp;
    if (jj_scan_token(48)) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_15() {
    if (jj_scan_token(VAR)) return true;
    return false;
  }

  static private boolean jj_3R_32() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(38)) {
    jj_scanpos = xsp;
    if (jj_scan_token(39)) {
    jj_scanpos = xsp;
    if (jj_scan_token(40)) {
    jj_scanpos = xsp;
    if (jj_scan_token(41)) {
    jj_scanpos = xsp;
    if (jj_scan_token(42)) {
    jj_scanpos = xsp;
    if (jj_scan_token(43)) return true;
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_14() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(24)) {
    jj_scanpos = xsp;
    if (jj_scan_token(25)) return true;
    }
    return false;
  }

  static private boolean jj_3R_13() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(46)) {
    jj_scanpos = xsp;
    if (jj_scan_token(47)) return true;
    }
    return false;
  }

  static private boolean jj_3R_31() {
    if (jj_scan_token(NOT)) return true;
    return false;
  }

  static private boolean jj_3R_30() {
    if (jj_3R_14()) return true;
    return false;
  }

  static private boolean jj_3_15() {
    if (jj_3R_14()) return true;
    if (jj_scan_token(OR)) return true;
    if (jj_3R_9()) return true;
    return false;
  }

  static private boolean jj_3_14() {
    if (jj_3R_14()) return true;
    if (jj_scan_token(AND)) return true;
    if (jj_3R_9()) return true;
    return false;
  }

  static private boolean jj_3_13() {
    if (jj_3R_14()) return true;
    if (jj_scan_token(EQUAL)) return true;
    if (jj_3R_9()) return true;
    return false;
  }

  static private boolean jj_3_12() {
    if (jj_3R_14()) return true;
    if (jj_scan_token(GTE)) return true;
    if (jj_3R_9()) return true;
    return false;
  }

  static private boolean jj_3_11() {
    if (jj_3R_14()) return true;
    if (jj_scan_token(LTE)) return true;
    if (jj_3R_9()) return true;
    return false;
  }

  static private boolean jj_3R_11() {
    if (jj_scan_token(COMMA)) return true;
    return false;
  }

  static private boolean jj_3_10() {
    if (jj_3R_14()) return true;
    if (jj_scan_token(GTHEN)) return true;
    if (jj_3R_9()) return true;
    return false;
  }

  static private boolean jj_3_9() {
    if (jj_3R_14()) return true;
    if (jj_scan_token(LTHEN)) return true;
    if (jj_3R_9()) return true;
    return false;
  }

  static private boolean jj_3R_29() {
    if (jj_3R_13()) return true;
    return false;
  }

  static private boolean jj_3_8() {
    if (jj_3R_13()) return true;
    if (jj_scan_token(MULT)) return true;
    if (jj_3R_9()) return true;
    return false;
  }

  static private boolean jj_3_7() {
    if (jj_3R_13()) return true;
    if (jj_scan_token(DIVIDE)) return true;
    if (jj_3R_9()) return true;
    return false;
  }

  static private boolean jj_3R_12() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(ID)) return true;
    return false;
  }

  static private boolean jj_3_6() {
    if (jj_3R_13()) return true;
    if (jj_scan_token(MINUS)) return true;
    if (jj_3R_9()) return true;
    return false;
  }

  static private boolean jj_3_5() {
    if (jj_3R_13()) return true;
    if (jj_scan_token(PLUS)) return true;
    if (jj_3R_9()) return true;
    return false;
  }

  static private boolean jj_3R_10() {
    if (jj_3R_9()) return true;
    return false;
  }

  static private boolean jj_3R_28() {
    if (jj_scan_token(STRINGLESS)) return true;
    return false;
  }

  static private boolean jj_3R_27() {
    if (jj_scan_token(STRINGEQUAL)) return true;
    return false;
  }

  static private boolean jj_3R_26() {
    if (jj_scan_token(SUBSTRING)) return true;
    return false;
  }

  static private boolean jj_3R_25() {
    if (jj_scan_token(STRLEN)) return true;
    return false;
  }

  static private boolean jj_3_4() {
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(INSTANCEOF)) return true;
    if (jj_3R_9()) return true;
    return false;
  }

  static private boolean jj_3R_24() {
    if (jj_scan_token(READLINE)) return true;
    return false;
  }

  static private boolean jj_3R_23() {
    if (jj_scan_token(PRINT)) return true;
    return false;
  }

  static private boolean jj_3_3() {
    if (jj_scan_token(ID)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_12()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_22() {
    if (jj_scan_token(NEW)) return true;
    return false;
  }

  static private boolean jj_3R_21() {
    if (jj_3R_32()) return true;
    return false;
  }

  static private boolean jj_3R_20() {
    if (jj_scan_token(RETURN)) return true;
    return false;
  }

  static private boolean jj_3R_19() {
    if (jj_scan_token(FUNC)) return true;
    return false;
  }

  static private boolean jj_3R_18() {
    if (jj_scan_token(LBRACE)) return true;
    return false;
  }

  static private boolean jj_3_2() {
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_10()) jj_scanpos = xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_11()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_17() {
    if (jj_scan_token(WHILE)) return true;
    return false;
  }

  static private boolean jj_3R_16() {
    if (jj_scan_token(IF)) return true;
    return false;
  }

  static private boolean jj_3_1() {
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(EQ)) return true;
    if (jj_3R_9()) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public FootleTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[22];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0xcf980220,0xcf980220,0x400000,0xcf980220,0xcf980220,0x400,0xcf980220,0x0,0x400,0xcf980220,0x0,0x80000,0x900000,0xc000020,0x0,0x80000000,0x0,0x43000200,0x0,0x3000000,0x0,0x20,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x1fff7,0x1fff7,0x0,0x1fff7,0x1fff7,0x0,0x1fff7,0x2000,0x0,0x1fff7,0x20000,0x0,0x0,0x1fc0,0x6,0x31,0xc000,0x10000,0xc000,0x0,0xfc0,0x0,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[15];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Footle(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Footle(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new FootleTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 22; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 22; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Footle(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new FootleTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 22; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 22; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Footle(FootleTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 22; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(FootleTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 22; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List jj_expentries = new java.util.ArrayList();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[52];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 22; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 52; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 15; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
