
PARSER_BEGIN(Footle)
package parser;

import expression.*;
import value.*;
import Interpreter.*;
import staticpass.*;
import java.util.LinkedList;
import java.util.List;

import java.io.*;
/** Simple brace matcher. */
public class Footle {

  /** Main entry point. */
  public static void main(String args[]) throws ParseException {
    //Reader sr = new StringReader("testfile");
    Reader sr = null;
	try {
		sr = new FileReader("testfile");
	} catch (FileNotFoundException e) {
		// TODO Auto-generated catch block
		e.printStackTrace();
	}
    Footle parser = new Footle(sr);
    Expression tree = parser.Input();
    try {
		tree.getValue(null);
	} catch (ReturnException e) {
		// TODO Auto-generated catch block
		e.printStackTrace();
	} catch (TypeException e) {
		// TODO Auto-generated catch block
		e.printStackTrace();
	} catch (UnboundIdentifierException e) {
		// TODO Auto-generated catch block
		e.printStackTrace();
	}
    int temp = 0;
  }

}

PARSER_END(Footle)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
}

TOKEN :
{
  <LBRACE: "{">
| <RBRACE: "}">
| <LPAREN: "(">
| <RPAREN: ")">
| <SEMI: ";">
| <COMMA: ",">
| <PLUS: "+">
| <MINUS: "-">
| <DIVIDE: "/">
| <MULT: "*">
| <LTHEN: "<">
| <GTHEN: ">">
| <LTE: "<=">
| <GTE: ">=">
| <VAR: "var">
| <IF: "if">
| <ELSE: "else">
| <THEN: "then">
| <WHILE: "while">
| <TRUE: "true">
| <FALSE: "false">
| <RETURN: "return">
| <NEW: "new">
| <AND: "&&">
| <OR: "||">
| <NOT: "!">
| <ISSTR: "string?">
| <STRLEN: "string-length">
| <SUBSTRING: "substring">
| <PRINT: "print">
| <READLINE: "read-line">
| <INSTANCEOF: "instanceof">
| <STRINGEQUAL: "string=?">
| <STRINGLESS: "string<?">
| <ISINT: "integer?">
| <ISFP: "floating-point?">
| <ISVOID: "void?">

| <ISCLOSURE: "closure?">
| <ISPLAIN: "plain?">
| <FUNC: "function">
| <ID: ["a"-"z","A"-"Z"] ( ["a"-"z","A"-"Z","0"-"9"] )* >
| <NUM: ( ["0"-"9"] )+ >
| < FLOAT:
        (["0"-"9"])+ "." (["0"-"9"])*
      | "." (["0"-"9"])+
  >
| < STRING:
      "\""
      (   (~["\"","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )*
      "\""
  >
| <DOT: ".">
| <EQ: "=">
| <EQUAL: "==">
}

/** Root production. */
Expression Input() :
{List<Expression> finList = new LinkedList<Expression>(); Expression finalExp; }
{
  (finalExp = Statement() {finList.add(finalExp);})* <EOF>
  {return new Scope(new Sequence(finList)); }
}

Expression Statement() :
{Expression retVal = null; Expression retVal1 = null; Expression retVal2 = null; 
  Token idval = null; Token funName = null; Token exp; List<Expression> finList = new LinkedList<Expression>();
  List<String> argList = new LinkedList<String>(); }
{
   <VAR> idval = <ID> <EQ> retVal = Expression() <SEMI>
   { return new OpAssign(new OpVarDecl(idval.image), retVal); }
|  LOOKAHEAD(3) retVal = PrecedenceOne() <EQ> retVal1 = Expression() <SEMI>
   { return new OpAssign(retVal, retVal1); }
   
|  <WHILE> <LPAREN> retVal = Expression() <RPAREN>
   retVal1 = Statement()
   { return new OpWhile(retVal, new Scope(retVal1)); }
   
|  <ISINT> <LPAREN> retVal = Expression() <RPAREN>
   { return new IsType(IntValue.class, retVal); }
   
|  <LBRACE> (retVal1 = Statement() {finList.add(retVal1);})* <RBRACE>
   { return new Scope(new Sequence(finList)); }
|  <IF> <LPAREN> retVal = Expression() <RPAREN>
   retVal1 = Statement() [LOOKAHEAD(3) <ELSE> retVal2 = Statement()]
   { return new OpIfElse(retVal, retVal1, retVal2); }
   
|  LOOKAHEAD(4) <FUNC> funName=<ID> <LPAREN>[idval=<ID>{argList.add(idval.image); } 
     (<COMMA> idval=<ID> {argList.add(idval.image);})*]<RPAREN>
   retVal1 = Statement()
   { return new OpFuncDecl(new Function(argList, new Scope(retVal1)), funName.image); }

|  <RETURN> retVal = Expression() <SEMI>
   { return new Return(retVal); }
   
|  <PRINT> <LPAREN> retVal = Expression() <RPAREN> <SEMI>
   { return new Print(retVal); }


|  retVal = Expression() <SEMI>
   { return retVal; }
}

Expression Expression() :
{Expression retVal = null; Expression retVal1 = null; Expression retVal2 = null; 
 Token val; Token idval; 
 List<Expression> finList = new LinkedList<Expression>();
 List<String> argList = new LinkedList<String>(); }
{
   <FUNC> <LPAREN>[idval=<ID>{argList.add(idval.image); } 
     (<COMMA> idval=<ID> {argList.add(idval.image);})*]<RPAREN>
   retVal = Statement()
   { return new ClosureValue(new Function(argList, new Scope(retVal))); }

|  <ISSTR> <LPAREN> retVal = Expression() <RPAREN>
   { return new IsType(StringValue.class, retVal); }
|  <ISFP> <LPAREN> retVal = Expression() <RPAREN>
   { return new IsType(FloatValue.class, retVal); }
|  <ISVOID> <LPAREN> retVal = Expression() <RPAREN>
   { return new IsType(VoidValue.class, retVal); }
|  <ISCLOSURE> <LPAREN> retVal = Expression() <RPAREN>
   { return new IsType(ClosureValue.class, retVal); }
|  <ISPLAIN> <LPAREN> retVal = Expression() <RPAREN>
   { return new IsType(PlainObject.class, retVal); }
   
|  <STRLEN> <LPAREN> retVal = Expression() <RPAREN>
   { return new StringLength(retVal); }
   
|  <SUBSTRING> <LPAREN> retVal = Expression() 
     <COMMA> retVal1 = Expression() 
     <COMMA> retVal2 = Expression() <RPAREN>
   { return new SubString(retVal, retVal1, retVal2); }
   
|  <STRINGEQUAL> <LPAREN> retVal = Expression() 
     <COMMA> retVal1 = Expression() <RPAREN>
   { return new OpStringEqual(retVal, retVal1); }

|  <STRINGLESS> <LPAREN> retVal = Expression() 
     <COMMA> retVal1 = Expression() <RPAREN>
   { return new OpStringLess(retVal, retVal1); }
      
|  LOOKAHEAD(4) idval = <ID> <LPAREN> 
     [retVal = Expression() {finList.add(retVal);}(
       <COMMA> retVal = Expression(){finList.add(retVal);})*] <RPAREN>
   {return new OpFunctionCall(new IdValue(idval.image), finList); }
|  <NEW> idval = <ID> <LPAREN> [retVal = Expression() {finList.add(retVal);}(
       <COMMA> retVal = Expression(){finList.add(retVal);})*] <RPAREN>
   { return new OpNew(new IdValue(idval.image), finList); }    

| LOOKAHEAD(4)
   retVal = Precedence()
  { return retVal; }
/**
|  LOOKAHEAD(100) 
   retVal=Expr() ( LOOKAHEAD(100) <LTHEN> retVal2 = Expression())+
   { return new OpLessThan(retVal, retVal2); }
|  LOOKAHEAD(100) 
   retVal=Expr() ( LOOKAHEAD(100) <GTHEN> retVal2 = Expression())+
   { return new OpGreaterThan(retVal, retVal2); }
|  LOOKAHEAD(100) 
   retVal=Expr() ( LOOKAHEAD(100) <LTE> retVal2 = Expression())+
   { return new OpLTE(retVal, retVal2); }
|  LOOKAHEAD(100) 
   retVal=Expr() ( LOOKAHEAD(100) <GTE> retVal2 = Expression())+
   { return new OpGTE(retVal, retVal2); }
|  LOOKAHEAD(100) 
   retVal=Expr() ( LOOKAHEAD(100) <AND> retVal2 = Expression())+
   { return new And(retVal, retVal2); }
|  LOOKAHEAD(100) 
   retVal=Expr() ( LOOKAHEAD(100) <OR> retVal2 = Expression())+
   { return new Or(retVal, retVal2); } */

|  LOOKAHEAD(100)
   <NOT> retVal = Expression()
   { return new Not(retVal); }
/*
| LOOKAHEAD(100)
   retVal=Expr()
   { return retVal; } */
}
Expression Precedence() :
{Expression retVal = null; Expression retVal2 = null;}
{
   LOOKAHEAD(10)
   retVal = PrecedenceSev() <EQUAL> retVal2 = Precedence()
   { return new OpEquals(retVal, retVal2); }
|  LOOKAHEAD(10)
   retVal = PrecedenceSev()
   { return retVal; }
}

Expression PrecedenceSev() :
{Expression retVal = null; Expression retVal2 = null;}
{
   LOOKAHEAD(10)
   retVal = PrecedenceSix() <AND> retVal2 = PrecedenceSev()
   { return new And(retVal, retVal2); }
|  LOOKAHEAD(10)
   retVal = PrecedenceSix() <OR> retVal2 = PrecedenceSev()
   { return new Or(retVal, retVal2); }

|  retVal= PrecedenceSix()
   { return retVal; }
}

Expression PrecedenceSix() :
{Expression retVal = null; Expression retVal2 = null;}
{
   LOOKAHEAD(10)
   retVal = PrecedenceFive() <LTHEN> retVal2 = PrecedenceSix()
   { return new OpLessThan(retVal, retVal2); }
|  LOOKAHEAD(10)
   retVal = PrecedenceFive() <LTE> retVal2 = PrecedenceSix()
   { return new OpLTE(retVal, retVal2); }
|  LOOKAHEAD(10)
   retVal = PrecedenceFive() <GTHEN> retVal2 = PrecedenceSix()
   { return new OpGreaterThan(retVal, retVal2); }
|  LOOKAHEAD(10)
   retVal = PrecedenceFive() <GTE> retVal2 = PrecedenceSix()
   { return new OpGTE(retVal, retVal2); }

|  retVal= PrecedenceFive()
   { return retVal; }
}

Expression PrecedenceFive() :
{Expression retVal = null; Expression retVal2 = null;}
{
   LOOKAHEAD(10)
   retVal = PrecedenceFour() <DIVIDE> retVal2 = PrecedenceFive()
   { return new OpDivide(retVal, retVal2); }

|  retVal= PrecedenceFour()
   { return retVal; }
}

Expression PrecedenceFour() :
{Expression retVal = null; Expression retVal2 = null;}
{
   LOOKAHEAD(10)
   retVal = PrecedenceThreeFive() <MINUS> retVal2 = PrecedenceFour()
   { return new OpSub(retVal, retVal2); }

|  retVal= PrecedenceThreeFive()
   { return retVal; }
}

Expression PrecedenceThreeFive() :
{Expression retVal = null; Expression retVal2 = null;}
{
   LOOKAHEAD(10)
   retVal = PrecedenceThree() <PLUS> retVal2 = PrecedenceThreeFive()
   { return new OpAdd(retVal, retVal2); }

|  retVal= PrecedenceThree()
   { return retVal; }
}

Expression PrecedenceThree() :
{Expression retVal = null; Expression retVal2 = null;}
{
   LOOKAHEAD(10)
   retVal = PrecedenceTwo() <MULT> retVal2 = PrecedenceThree()
   { return new OpMult(retVal, retVal2); }

|  retVal= PrecedenceTwo()
   { return retVal; }
}

Expression PrecedenceTwo() :
{Expression retVal = null; Expression retVal2 = null;}
{
   <NOT> retVal = PrecedenceTwo()
   { return new Not(retVal); }

|  retVal= PrecedenceOne()
   { return retVal; }
}

Expression PrecedenceOne() :
{Expression retVal = null; Expression retVal2 = null;}
{
   LOOKAHEAD(10)
   retVal = Expr() <DOT> retVal2 = PrecedenceOne()
   { return new OpField(retVal, retVal2); }

|  retVal= Expr()
   { return retVal; }
}

Expression Expr() :
{Expression retVal = null; Token val = null; Token idval = null;}
{
   val=<NUM>
   { return new IntValue(Integer.parseInt(val.image)); }
|  val = <FLOAT>
   { return new FloatValue(Float.parseFloat(val.image)); }
|  <TRUE>
   { return new BoolValue(true); }
|  <FALSE>
   { return new BoolValue(false); }
|  val=<STRING>
   { return new StringValue(val.image); }
|  <LPAREN> retVal = Expression() <RPAREN>
   { return retVal; }
|  val=<ID>
   { return new IdValue(val.image); }
}



