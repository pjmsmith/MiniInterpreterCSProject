/* Generated By:JavaCC: Do not edit this line. FootleConstants.java */
package parser;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface FootleConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int LBRACE = 5;
  /** RegularExpression Id. */
  int RBRACE = 6;
  /** RegularExpression Id. */
  int LPAREN = 7;
  /** RegularExpression Id. */
  int RPAREN = 8;
  /** RegularExpression Id. */
  int SEMI = 9;
  /** RegularExpression Id. */
  int COMMA = 10;
  /** RegularExpression Id. */
  int PLUS = 11;
  /** RegularExpression Id. */
  int MINUS = 12;
  /** RegularExpression Id. */
  int DIVIDE = 13;
  /** RegularExpression Id. */
  int MULT = 14;
  /** RegularExpression Id. */
  int LTHEN = 15;
  /** RegularExpression Id. */
  int GTHEN = 16;
  /** RegularExpression Id. */
  int LTE = 17;
  /** RegularExpression Id. */
  int GTE = 18;
  /** RegularExpression Id. */
  int VAR = 19;
  /** RegularExpression Id. */
  int IF = 20;
  /** RegularExpression Id. */
  int ELSE = 21;
  /** RegularExpression Id. */
  int THEN = 22;
  /** RegularExpression Id. */
  int WHILE = 23;
  /** RegularExpression Id. */
  int TRUE = 24;
  /** RegularExpression Id. */
  int FALSE = 25;
  /** RegularExpression Id. */
  int RETURN = 26;
  /** RegularExpression Id. */
  int NEW = 27;
  /** RegularExpression Id. */
  int AND = 28;
  /** RegularExpression Id. */
  int OR = 29;
  /** RegularExpression Id. */
  int NOT = 30;
  /** RegularExpression Id. */
  int ISSTR = 31;
  /** RegularExpression Id. */
  int STRLEN = 32;
  /** RegularExpression Id. */
  int SUBSTRING = 33;
  /** RegularExpression Id. */
  int PRINT = 34;
  /** RegularExpression Id. */
  int READLINE = 35;
  /** RegularExpression Id. */
  int INSTANCEOF = 36;
  /** RegularExpression Id. */
  int STRINGEQUAL = 37;
  /** RegularExpression Id. */
  int STRINGLESS = 38;
  /** RegularExpression Id. */
  int ISINT = 39;
  /** RegularExpression Id. */
  int ISFP = 40;
  /** RegularExpression Id. */
  int ISVOID = 41;
  /** RegularExpression Id. */
  int ISCLOSURE = 42;
  /** RegularExpression Id. */
  int ISPLAIN = 43;
  /** RegularExpression Id. */
  int FUNC = 44;
  /** RegularExpression Id. */
  int ID = 45;
  /** RegularExpression Id. */
  int NUM = 46;
  /** RegularExpression Id. */
  int FLOAT = 47;
  /** RegularExpression Id. */
  int STRING = 48;
  /** RegularExpression Id. */
  int DOT = 49;
  /** RegularExpression Id. */
  int EQ = 50;
  /** RegularExpression Id. */
  int EQUAL = 51;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "\"{\"",
    "\"}\"",
    "\"(\"",
    "\")\"",
    "\";\"",
    "\",\"",
    "\"+\"",
    "\"-\"",
    "\"/\"",
    "\"*\"",
    "\"<\"",
    "\">\"",
    "\"<=\"",
    "\">=\"",
    "\"var\"",
    "\"if\"",
    "\"else\"",
    "\"then\"",
    "\"while\"",
    "\"true\"",
    "\"false\"",
    "\"return\"",
    "\"new\"",
    "\"&&\"",
    "\"||\"",
    "\"!\"",
    "\"string?\"",
    "\"string-length\"",
    "\"substring\"",
    "\"print\"",
    "\"read-line\"",
    "\"instanceof\"",
    "\"string=?\"",
    "\"string<?\"",
    "\"integer?\"",
    "\"floating-point?\"",
    "\"void?\"",
    "\"closure?\"",
    "\"plain?\"",
    "\"function\"",
    "<ID>",
    "<NUM>",
    "<FLOAT>",
    "<STRING>",
    "\".\"",
    "\"=\"",
    "\"==\"",
  };

}
