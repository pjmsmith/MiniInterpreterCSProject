/* Generated By:JavaCC: Do not edit this line. Footle.java */
package parser;

import expression.*;
import value.*;
import Interpreter.*;
import staticpass.*;
import java.util.LinkedList;
import java.util.List;

import java.io.*;
/** Simple brace matcher. */
public class Footle implements FootleConstants {

  /** Main entry point. */
  public static void main(String args[]) throws ParseException {
    //Reader sr = new StringReader("testfile");
    Reader sr = null;
        try {
                sr = new FileReader("testfile");
        } catch (FileNotFoundException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
        }
    Footle parser = new Footle(sr);
    Expression tree = parser.Input();
    try {
                tree.getValue(null);
        } catch (ReturnException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
        } catch (TypeException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
        } catch (UnboundIdentifierException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
        }
    int temp = 0;
  }

/** Root production. */
  static final public Expression Input() throws ParseException {
 List<Expression> finList = new LinkedList<Expression>(); Expression finalExp;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACE:
      case LPAREN:
      case VAR:
      case IF:
      case WHILE:
      case TRUE:
      case FALSE:
      case RETURN:
      case NEW:
      case NOT:
      case ISSTR:
      case STRLEN:
      case SUBSTRING:
      case PRINT:
      case STRINGEQUAL:
      case STRINGLESS:
      case ISINT:
      case ISFP:
      case ISVOID:
      case ISCLOSURE:
      case ISPLAIN:
      case FUNC:
      case ID:
      case NUM:
      case FLOAT:
      case STRING:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      finalExp = Statement();
                           finList.add(finalExp);
    }
    jj_consume_token(0);
   {if (true) return new Scope(new Sequence(finList));}
    throw new Error("Missing return statement in function");
  }

  static final public Expression Statement() throws ParseException {
 Expression retVal = null; Expression retVal1 = null; Expression retVal2 = null;
  Token idval = null; Token funName = null; Token exp; List<Expression> finList = new LinkedList<Expression>();
  List<String> argList = new LinkedList<String>();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VAR:
      jj_consume_token(VAR);
      idval = jj_consume_token(ID);
      jj_consume_token(EQ);
      retVal = Expression();
      jj_consume_token(SEMI);
     {if (true) return new OpAssign(new OpVarDecl(idval.image), retVal);}
      break;
    default:
      jj_la1[4] = jj_gen;
      if (jj_2_2(3)) {
        retVal = Expr();
        jj_consume_token(EQ);
        retVal1 = Expression();
        jj_consume_token(SEMI);
     {if (true) return new OpAssign(retVal, retVal1);}
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case WHILE:
          jj_consume_token(WHILE);
          jj_consume_token(LPAREN);
          retVal = Expression();
          jj_consume_token(RPAREN);
          retVal1 = Statement();
     {if (true) return new OpWhile(retVal, new Scope(retVal1));}
          break;
        case ISINT:
          jj_consume_token(ISINT);
          jj_consume_token(LPAREN);
          retVal = Expression();
          jj_consume_token(RPAREN);
     {if (true) return new IsType(IntValue.class, retVal);}
          break;
        case LBRACE:
          jj_consume_token(LBRACE);
          label_2:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case LBRACE:
            case LPAREN:
            case VAR:
            case IF:
            case WHILE:
            case TRUE:
            case FALSE:
            case RETURN:
            case NEW:
            case NOT:
            case ISSTR:
            case STRLEN:
            case SUBSTRING:
            case PRINT:
            case STRINGEQUAL:
            case STRINGLESS:
            case ISINT:
            case ISFP:
            case ISVOID:
            case ISCLOSURE:
            case ISPLAIN:
            case FUNC:
            case ID:
            case NUM:
            case FLOAT:
            case STRING:
              ;
              break;
            default:
              jj_la1[1] = jj_gen;
              break label_2;
            }
            retVal1 = Statement();
                                    finList.add(retVal1);
          }
          jj_consume_token(RBRACE);
     {if (true) return new Scope(new Sequence(finList));}
          break;
        case IF:
          jj_consume_token(IF);
          jj_consume_token(LPAREN);
          retVal = Expression();
          jj_consume_token(RPAREN);
          retVal1 = Statement();
          if (jj_2_1(3)) {
            jj_consume_token(ELSE);
            retVal2 = Statement();
          } else {
            ;
          }
     {if (true) return new OpIfElse(retVal, retVal1, retVal2);}
          break;
        default:
          jj_la1[5] = jj_gen;
          if (jj_2_3(4)) {
            jj_consume_token(FUNC);
            funName = jj_consume_token(ID);
            jj_consume_token(LPAREN);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case ID:
              idval = jj_consume_token(ID);
                                                        argList.add(idval.image);
              label_3:
              while (true) {
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case COMMA:
                  ;
                  break;
                default:
                  jj_la1[2] = jj_gen;
                  break label_3;
                }
                jj_consume_token(COMMA);
                idval = jj_consume_token(ID);
                          argList.add(idval.image);
              }
              break;
            default:
              jj_la1[3] = jj_gen;
              ;
            }
            jj_consume_token(RPAREN);
            retVal1 = Statement();
     {if (true) return new OpFuncDecl(new Function(argList, new Scope(retVal1)), funName.image);}
          } else {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case RETURN:
              jj_consume_token(RETURN);
              retVal = Expression();
              jj_consume_token(SEMI);
     {if (true) return new Return(retVal);}
              break;
            case PRINT:
              jj_consume_token(PRINT);
              jj_consume_token(LPAREN);
              retVal = Expression();
              jj_consume_token(RPAREN);
              jj_consume_token(SEMI);
     {if (true) return new Print(retVal);}
              break;
            case LPAREN:
            case TRUE:
            case FALSE:
            case NEW:
            case NOT:
            case ISSTR:
            case STRLEN:
            case SUBSTRING:
            case STRINGEQUAL:
            case STRINGLESS:
            case ISFP:
            case ISVOID:
            case ISCLOSURE:
            case ISPLAIN:
            case FUNC:
            case ID:
            case NUM:
            case FLOAT:
            case STRING:
              retVal = Expression();
              jj_consume_token(SEMI);
     {if (true) return retVal;}
              break;
            default:
              jj_la1[6] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
        }
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public Expression Expression() throws ParseException {
 Expression retVal = null; Expression retVal1 = null; Expression retVal2 = null;
 Token val; Token idval;
 List<Expression> finList = new LinkedList<Expression>();
 List<String> argList = new LinkedList<String>();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FUNC:
      jj_consume_token(FUNC);
      jj_consume_token(LPAREN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
        idval = jj_consume_token(ID);
                              argList.add(idval.image);
        label_4:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[7] = jj_gen;
            break label_4;
          }
          jj_consume_token(COMMA);
          idval = jj_consume_token(ID);
                          argList.add(idval.image);
        }
        break;
      default:
        jj_la1[8] = jj_gen;
        ;
      }
      jj_consume_token(RPAREN);
      retVal = Statement();
     {if (true) return new ClosureValue(new Function(argList, new Scope(retVal)));}
      break;
    case ISSTR:
      jj_consume_token(ISSTR);
      jj_consume_token(LPAREN);
      retVal = Expression();
      jj_consume_token(RPAREN);
     {if (true) return new IsType(StringValue.class, retVal);}
      break;
    case ISFP:
      jj_consume_token(ISFP);
      jj_consume_token(LPAREN);
      retVal = Expression();
      jj_consume_token(RPAREN);
     {if (true) return new IsType(FloatValue.class, retVal);}
      break;
    case ISVOID:
      jj_consume_token(ISVOID);
      jj_consume_token(LPAREN);
      retVal = Expression();
      jj_consume_token(RPAREN);
     {if (true) return new IsType(VoidValue.class, retVal);}
      break;
    case ISCLOSURE:
      jj_consume_token(ISCLOSURE);
      jj_consume_token(LPAREN);
      retVal = Expression();
      jj_consume_token(RPAREN);
     {if (true) return new IsType(ClosureValue.class, retVal);}
      break;
    case ISPLAIN:
      jj_consume_token(ISPLAIN);
      jj_consume_token(LPAREN);
      retVal = Expression();
      jj_consume_token(RPAREN);
     {if (true) return new IsType(PlainObject.class, retVal);}
      break;
    case STRLEN:
      jj_consume_token(STRLEN);
      jj_consume_token(LPAREN);
      retVal = Expression();
      jj_consume_token(RPAREN);
     {if (true) return new StringLength(retVal);}
      break;
    case SUBSTRING:
      jj_consume_token(SUBSTRING);
      jj_consume_token(LPAREN);
      retVal = Expression();
      jj_consume_token(COMMA);
      retVal1 = Expression();
      jj_consume_token(COMMA);
      retVal2 = Expression();
      jj_consume_token(RPAREN);
     {if (true) return new SubString(retVal, retVal1, retVal2);}
      break;
    case STRINGEQUAL:
      jj_consume_token(STRINGEQUAL);
      jj_consume_token(LPAREN);
      retVal = Expression();
      jj_consume_token(COMMA);
      retVal1 = Expression();
      jj_consume_token(RPAREN);
     {if (true) return new OpStringEqual(retVal, retVal1);}
      break;
    case STRINGLESS:
      jj_consume_token(STRINGLESS);
      jj_consume_token(LPAREN);
      retVal = Expression();
      jj_consume_token(COMMA);
      retVal1 = Expression();
      jj_consume_token(RPAREN);
     {if (true) return new OpStringLess(retVal, retVal1);}
      break;
    default:
      jj_la1[13] = jj_gen;
      if (jj_2_4(4)) {
        idval = jj_consume_token(ID);
        jj_consume_token(LPAREN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LPAREN:
        case TRUE:
        case FALSE:
        case NEW:
        case NOT:
        case ISSTR:
        case STRLEN:
        case SUBSTRING:
        case STRINGEQUAL:
        case STRINGLESS:
        case ISFP:
        case ISVOID:
        case ISCLOSURE:
        case ISPLAIN:
        case FUNC:
        case ID:
        case NUM:
        case FLOAT:
        case STRING:
          retVal = Expression();
                             finList.add(retVal);
          label_5:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case COMMA:
              ;
              break;
            default:
              jj_la1[9] = jj_gen;
              break label_5;
            }
            jj_consume_token(COMMA);
            retVal = Expression();
                                     finList.add(retVal);
          }
          break;
        default:
          jj_la1[10] = jj_gen;
          ;
        }
        jj_consume_token(RPAREN);
    {if (true) return new OpFunctionCall(new IdValue(idval.image), finList);}
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NEW:
          jj_consume_token(NEW);
          idval = jj_consume_token(ID);
          jj_consume_token(LPAREN);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LPAREN:
          case TRUE:
          case FALSE:
          case NEW:
          case NOT:
          case ISSTR:
          case STRLEN:
          case SUBSTRING:
          case STRINGEQUAL:
          case STRINGLESS:
          case ISFP:
          case ISVOID:
          case ISCLOSURE:
          case ISPLAIN:
          case FUNC:
          case ID:
          case NUM:
          case FLOAT:
          case STRING:
            retVal = Expression();
                                                       finList.add(retVal);
            label_6:
            while (true) {
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case COMMA:
                ;
                break;
              default:
                jj_la1[11] = jj_gen;
                break label_6;
              }
              jj_consume_token(COMMA);
              retVal = Expression();
                                     finList.add(retVal);
            }
            break;
          default:
            jj_la1[12] = jj_gen;
            ;
          }
          jj_consume_token(RPAREN);
     {if (true) return new OpNew(new IdValue(idval.image), finList);}
          break;
        default:
          jj_la1[14] = jj_gen;
          if (jj_2_5(4)) {
            retVal = Precedence();
    {if (true) return retVal;}
          } else if (jj_2_6(100)) {
            jj_consume_token(NOT);
            retVal = Expression();
     {if (true) return new Not(retVal);}
          } else {
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public Expression Precedence() throws ParseException {
 Expression retVal = null; Expression retVal2 = null;
    if (jj_2_7(10)) {
      retVal = PrecedenceSev();
      jj_consume_token(EQUAL);
      retVal2 = Precedence();
     {if (true) return new OpEquals(retVal, retVal2);}
    } else if (jj_2_8(10)) {
      retVal = PrecedenceSev();
     {if (true) return retVal;}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public Expression PrecedenceSev() throws ParseException {
 Expression retVal = null; Expression retVal2 = null;
    if (jj_2_9(10)) {
      retVal = PrecedenceSix();
      jj_consume_token(AND);
      retVal2 = PrecedenceSev();
     {if (true) return new And(retVal, retVal2);}
    } else if (jj_2_10(10)) {
      retVal = PrecedenceSix();
      jj_consume_token(OR);
      retVal2 = PrecedenceSev();
     {if (true) return new Or(retVal, retVal2);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
      case TRUE:
      case FALSE:
      case NOT:
      case ID:
      case NUM:
      case FLOAT:
      case STRING:
        retVal = PrecedenceSix();
     {if (true) return retVal;}
        break;
      default:
        jj_la1[15] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public Expression PrecedenceSix() throws ParseException {
 Expression retVal = null; Expression retVal2 = null;
    if (jj_2_11(10)) {
      retVal = PrecedenceFive();
      jj_consume_token(LTHEN);
      retVal2 = PrecedenceSix();
     {if (true) return new OpLessThan(retVal, retVal2);}
    } else if (jj_2_12(10)) {
      retVal = PrecedenceFive();
      jj_consume_token(LTE);
      retVal2 = PrecedenceSix();
     {if (true) return new OpLTE(retVal, retVal2);}
    } else if (jj_2_13(10)) {
      retVal = PrecedenceFive();
      jj_consume_token(GTHEN);
      retVal2 = PrecedenceSix();
     {if (true) return new OpGreaterThan(retVal, retVal2);}
    } else if (jj_2_14(10)) {
      retVal = PrecedenceFive();
      jj_consume_token(GTE);
      retVal2 = PrecedenceSix();
     {if (true) return new OpGTE(retVal, retVal2);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
      case TRUE:
      case FALSE:
      case NOT:
      case ID:
      case NUM:
      case FLOAT:
      case STRING:
        retVal = PrecedenceFive();
     {if (true) return retVal;}
        break;
      default:
        jj_la1[16] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public Expression PrecedenceFive() throws ParseException {
 Expression retVal = null; Expression retVal2 = null;
    if (jj_2_15(10)) {
      retVal = PrecedenceFour();
      jj_consume_token(DIVIDE);
      retVal2 = PrecedenceFive();
     {if (true) return new OpDivide(retVal, retVal2);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
      case TRUE:
      case FALSE:
      case NOT:
      case ID:
      case NUM:
      case FLOAT:
      case STRING:
        retVal = PrecedenceFour();
     {if (true) return retVal;}
        break;
      default:
        jj_la1[17] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public Expression PrecedenceFour() throws ParseException {
 Expression retVal = null; Expression retVal2 = null;
    if (jj_2_16(10)) {
      retVal = PrecedenceThree();
      jj_consume_token(PLUS);
      retVal2 = PrecedenceFour();
     {if (true) return new OpAdd(retVal, retVal2);}
    } else if (jj_2_17(10)) {
      retVal = PrecedenceThree();
      jj_consume_token(MINUS);
      retVal2 = PrecedenceFour();
     {if (true) return new OpSub(retVal, retVal2);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
      case TRUE:
      case FALSE:
      case NOT:
      case ID:
      case NUM:
      case FLOAT:
      case STRING:
        retVal = PrecedenceThree();
     {if (true) return retVal;}
        break;
      default:
        jj_la1[18] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public Expression PrecedenceThree() throws ParseException {
 Expression retVal = null; Expression retVal2 = null;
    if (jj_2_18(10)) {
      retVal = PrecedenceTwo();
      jj_consume_token(MULT);
      retVal2 = PrecedenceThree();
     {if (true) return new OpMult(retVal, retVal2);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
      case TRUE:
      case FALSE:
      case NOT:
      case ID:
      case NUM:
      case FLOAT:
      case STRING:
        retVal = PrecedenceTwo();
     {if (true) return retVal;}
        break;
      default:
        jj_la1[19] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public Expression PrecedenceTwo() throws ParseException {
 Expression retVal = null; Expression retVal2 = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOT:
      jj_consume_token(NOT);
      retVal = PrecedenceTwo();
     {if (true) return new Not(retVal);}
      break;
    case LPAREN:
    case TRUE:
    case FALSE:
    case ID:
    case NUM:
    case FLOAT:
    case STRING:
      retVal = PrecedenceOne();
     {if (true) return retVal;}
      break;
    default:
      jj_la1[20] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public Expression PrecedenceOne() throws ParseException {
 Expression retVal = null; Expression retVal2 = null;
    if (jj_2_19(10)) {
      retVal = Expr();
      jj_consume_token(DOT);
      retVal2 = PrecedenceOne();
     {if (true) return new OpField(retVal, retVal2);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
      case TRUE:
      case FALSE:
      case ID:
      case NUM:
      case FLOAT:
      case STRING:
        retVal = Expr();
     {if (true) return retVal;}
        break;
      default:
        jj_la1[21] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public Expression Expr() throws ParseException {
 Expression retVal = null; Token val = null; Token idval = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUM:
      val = jj_consume_token(NUM);
     {if (true) return new IntValue(Integer.parseInt(val.image));}
      break;
    case FLOAT:
      val = jj_consume_token(FLOAT);
     {if (true) return new FloatValue(Float.parseFloat(val.image));}
      break;
    case TRUE:
      jj_consume_token(TRUE);
     {if (true) return new BoolValue(true);}
      break;
    case FALSE:
      jj_consume_token(FALSE);
     {if (true) return new BoolValue(false);}
      break;
    case STRING:
      val = jj_consume_token(STRING);
     {if (true) return new StringValue(val.image);}
      break;
    case LPAREN:
      jj_consume_token(LPAREN);
      retVal = Expression();
      jj_consume_token(RPAREN);
     {if (true) return retVal;}
      break;
    case ID:
      val = jj_consume_token(ID);
     {if (true) return new IdValue(val.image);}
      break;
    default:
      jj_la1[22] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  static private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  static private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  static private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  static private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  static private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  static private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  static private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  static private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  static private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  static private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  static private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  static private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  static private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  static private boolean jj_3R_39() {
    if (jj_scan_token(ISCLOSURE)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_9()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_38() {
    if (jj_scan_token(ISVOID)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_9()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_37() {
    if (jj_scan_token(ISFP)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_9()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_36() {
    if (jj_scan_token(ISSTR)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_9()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_58() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_scan_token(ID)) return true;
    return false;
  }

  static private boolean jj_3R_9() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_35()) {
    jj_scanpos = xsp;
    if (jj_3R_36()) {
    jj_scanpos = xsp;
    if (jj_3R_37()) {
    jj_scanpos = xsp;
    if (jj_3R_38()) {
    jj_scanpos = xsp;
    if (jj_3R_39()) {
    jj_scanpos = xsp;
    if (jj_3R_40()) {
    jj_scanpos = xsp;
    if (jj_3R_41()) {
    jj_scanpos = xsp;
    if (jj_3R_42()) {
    jj_scanpos = xsp;
    if (jj_3R_43()) {
    jj_scanpos = xsp;
    if (jj_3R_44()) {
    jj_scanpos = xsp;
    if (jj_3_4()) {
    jj_scanpos = xsp;
    if (jj_3R_45()) {
    jj_scanpos = xsp;
    if (jj_3_5()) {
    jj_scanpos = xsp;
    if (jj_3_6()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_35() {
    if (jj_scan_token(FUNC)) return true;
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_56()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_7()) return true;
    return false;
  }

  static private boolean jj_3_1() {
    if (jj_scan_token(ELSE)) return true;
    if (jj_3R_7()) return true;
    return false;
  }

  static private boolean jj_3R_34() {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  static private boolean jj_3R_33() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_9()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_32() {
    if (jj_scan_token(STRING)) return true;
    return false;
  }

  static private boolean jj_3R_31() {
    if (jj_scan_token(FALSE)) return true;
    return false;
  }

  static private boolean jj_3R_27() {
    if (jj_3R_9()) return true;
    if (jj_scan_token(SEMI)) return true;
    return false;
  }

  static private boolean jj_3R_30() {
    if (jj_scan_token(TRUE)) return true;
    return false;
  }

  static private boolean jj_3R_29() {
    if (jj_scan_token(FLOAT)) return true;
    return false;
  }

  static private boolean jj_3R_26() {
    if (jj_scan_token(PRINT)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_9()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_scan_token(SEMI)) return true;
    return false;
  }

  static private boolean jj_3R_8() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_28()) {
    jj_scanpos = xsp;
    if (jj_3R_29()) {
    jj_scanpos = xsp;
    if (jj_3R_30()) {
    jj_scanpos = xsp;
    if (jj_3R_31()) {
    jj_scanpos = xsp;
    if (jj_3R_32()) {
    jj_scanpos = xsp;
    if (jj_3R_33()) {
    jj_scanpos = xsp;
    if (jj_3R_34()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_28() {
    if (jj_scan_token(NUM)) return true;
    return false;
  }

  static private boolean jj_3R_25() {
    if (jj_scan_token(RETURN)) return true;
    if (jj_3R_9()) return true;
    if (jj_scan_token(SEMI)) return true;
    return false;
  }

  static private boolean jj_3R_60() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_scan_token(ID)) return true;
    return false;
  }

  static private boolean jj_3R_55() {
    if (jj_3R_7()) return true;
    return false;
  }

  static private boolean jj_3_3() {
    if (jj_scan_token(FUNC)) return true;
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_10()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_7()) return true;
    return false;
  }

  static private boolean jj_3R_54() {
    if (jj_3R_8()) return true;
    return false;
  }

  static private boolean jj_3R_24() {
    if (jj_scan_token(IF)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_9()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_7()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_1()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_19() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_19()) {
    jj_scanpos = xsp;
    if (jj_3R_54()) return true;
    }
    return false;
  }

  static private boolean jj_3_19() {
    if (jj_3R_8()) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_19()) return true;
    return false;
  }

  static private boolean jj_3R_23() {
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_55()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  static private boolean jj_3R_22() {
    if (jj_scan_token(ISINT)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_9()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_53() {
    if (jj_3R_19()) return true;
    return false;
  }

  static private boolean jj_3R_21() {
    if (jj_scan_token(WHILE)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_9()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_7()) return true;
    return false;
  }

  static private boolean jj_3R_18() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_52()) {
    jj_scanpos = xsp;
    if (jj_3R_53()) return true;
    }
    return false;
  }

  static private boolean jj_3R_52() {
    if (jj_scan_token(NOT)) return true;
    if (jj_3R_18()) return true;
    return false;
  }

  static private boolean jj_3_2() {
    if (jj_3R_8()) return true;
    if (jj_scan_token(EQ)) return true;
    if (jj_3R_9()) return true;
    if (jj_scan_token(SEMI)) return true;
    return false;
  }

  static private boolean jj_3R_20() {
    if (jj_scan_token(VAR)) return true;
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(EQ)) return true;
    if (jj_3R_9()) return true;
    if (jj_scan_token(SEMI)) return true;
    return false;
  }

  static private boolean jj_3R_7() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_20()) {
    jj_scanpos = xsp;
    if (jj_3_2()) {
    jj_scanpos = xsp;
    if (jj_3R_21()) {
    jj_scanpos = xsp;
    if (jj_3R_22()) {
    jj_scanpos = xsp;
    if (jj_3R_23()) {
    jj_scanpos = xsp;
    if (jj_3R_24()) {
    jj_scanpos = xsp;
    if (jj_3_3()) {
    jj_scanpos = xsp;
    if (jj_3R_25()) {
    jj_scanpos = xsp;
    if (jj_3R_26()) {
    jj_scanpos = xsp;
    if (jj_3R_27()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_51() {
    if (jj_3R_18()) return true;
    return false;
  }

  static private boolean jj_3R_17() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_18()) {
    jj_scanpos = xsp;
    if (jj_3R_51()) return true;
    }
    return false;
  }

  static private boolean jj_3_18() {
    if (jj_3R_18()) return true;
    if (jj_scan_token(MULT)) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  static private boolean jj_3R_50() {
    if (jj_3R_17()) return true;
    return false;
  }

  static private boolean jj_3_17() {
    if (jj_3R_17()) return true;
    if (jj_scan_token(MINUS)) return true;
    if (jj_3R_16()) return true;
    return false;
  }

  static private boolean jj_3R_16() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_16()) {
    jj_scanpos = xsp;
    if (jj_3_17()) {
    jj_scanpos = xsp;
    if (jj_3R_50()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3_16() {
    if (jj_3R_17()) return true;
    if (jj_scan_token(PLUS)) return true;
    if (jj_3R_16()) return true;
    return false;
  }

  static private boolean jj_3R_49() {
    if (jj_3R_16()) return true;
    return false;
  }

  static private boolean jj_3R_15() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_15()) {
    jj_scanpos = xsp;
    if (jj_3R_49()) return true;
    }
    return false;
  }

  static private boolean jj_3_15() {
    if (jj_3R_16()) return true;
    if (jj_scan_token(DIVIDE)) return true;
    if (jj_3R_15()) return true;
    return false;
  }

  static private boolean jj_3R_48() {
    if (jj_3R_15()) return true;
    return false;
  }

  static private boolean jj_3_14() {
    if (jj_3R_15()) return true;
    if (jj_scan_token(GTE)) return true;
    if (jj_3R_14()) return true;
    return false;
  }

  static private boolean jj_3_13() {
    if (jj_3R_15()) return true;
    if (jj_scan_token(GTHEN)) return true;
    if (jj_3R_14()) return true;
    return false;
  }

  static private boolean jj_3_12() {
    if (jj_3R_15()) return true;
    if (jj_scan_token(LTE)) return true;
    if (jj_3R_14()) return true;
    return false;
  }

  static private boolean jj_3R_14() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_11()) {
    jj_scanpos = xsp;
    if (jj_3_12()) {
    jj_scanpos = xsp;
    if (jj_3_13()) {
    jj_scanpos = xsp;
    if (jj_3_14()) {
    jj_scanpos = xsp;
    if (jj_3R_48()) return true;
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3_11() {
    if (jj_3R_15()) return true;
    if (jj_scan_token(LTHEN)) return true;
    if (jj_3R_14()) return true;
    return false;
  }

  static private boolean jj_3R_47() {
    if (jj_3R_14()) return true;
    return false;
  }

  static private boolean jj_3_10() {
    if (jj_3R_14()) return true;
    if (jj_scan_token(OR)) return true;
    if (jj_3R_13()) return true;
    return false;
  }

  static private boolean jj_3R_13() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_9()) {
    jj_scanpos = xsp;
    if (jj_3_10()) {
    jj_scanpos = xsp;
    if (jj_3R_47()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3_9() {
    if (jj_3R_14()) return true;
    if (jj_scan_token(AND)) return true;
    if (jj_3R_13()) return true;
    return false;
  }

  static private boolean jj_3_8() {
    if (jj_3R_13()) return true;
    return false;
  }

  static private boolean jj_3R_12() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_7()) {
    jj_scanpos = xsp;
    if (jj_3_8()) return true;
    }
    return false;
  }

  static private boolean jj_3_7() {
    if (jj_3R_13()) return true;
    if (jj_scan_token(EQUAL)) return true;
    if (jj_3R_12()) return true;
    return false;
  }

  static private boolean jj_3R_57() {
    if (jj_3R_9()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_59()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3_6() {
    if (jj_scan_token(NOT)) return true;
    if (jj_3R_9()) return true;
    return false;
  }

  static private boolean jj_3R_59() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_9()) return true;
    return false;
  }

  static private boolean jj_3_5() {
    if (jj_3R_12()) return true;
    return false;
  }

  static private boolean jj_3R_46() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_9()) return true;
    return false;
  }

  static private boolean jj_3R_11() {
    if (jj_3R_9()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_46()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_45() {
    if (jj_scan_token(NEW)) return true;
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_57()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static private boolean jj_3_4() {
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_11()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_44() {
    if (jj_scan_token(STRINGLESS)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_9()) return true;
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_9()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_43() {
    if (jj_scan_token(STRINGEQUAL)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_9()) return true;
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_9()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_10() {
    if (jj_scan_token(ID)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_60()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_42() {
    if (jj_scan_token(SUBSTRING)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_9()) return true;
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_9()) return true;
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_9()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_41() {
    if (jj_scan_token(STRLEN)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_9()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_56() {
    if (jj_scan_token(ID)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_58()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_40() {
    if (jj_scan_token(ISPLAIN)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_9()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public FootleTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[23];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0xcf9800a0,0xcf9800a0,0x400,0x0,0x80000,0x900020,0xcf000080,0x400,0x0,0x400,0xcb000080,0x400,0xcb000080,0x80000000,0x8000000,0x43000080,0x43000080,0x43000080,0x43000080,0x43000080,0x43000080,0x3000080,0x3000080,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x1ffe7,0x1ffe7,0x0,0x2000,0x0,0x80,0x1ff67,0x0,0x2000,0x0,0x1ff63,0x0,0x1ff63,0x1f63,0x0,0x1e000,0x1e000,0x1e000,0x1e000,0x1e000,0x1e000,0x1e000,0x1e000,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[19];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Footle(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Footle(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new FootleTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Footle(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new FootleTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Footle(FootleTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(FootleTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List jj_expentries = new java.util.ArrayList();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[52];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 23; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 52; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 19; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
